local Utils = {}
Utils["NotificationsRAW"] = loadstring(game:HttpGet("https://pastebin.com/raw/5GZ6GM6C", true))()
Utils["Notis"] = Utils.NotificationsRAW:Init()
local GameStuff = {
    Modules = {},
    Remotes = {},
}
GameStuff.Modules["Admins"] = require(game:GetService("ReplicatedStorage").Modules.Admins)
GameStuff.Remotes["RequestCatalog"] = game:GetService("ReplicatedStorage").Remotes.RequestCataIog
GameStuff.Remotes["RequestItemInfo"] = game:GetService("ReplicatedStorage").Remotes.RequestltemInfo
GameStuff.Remotes["PurchaseItemListing"] = game:GetService("ReplicatedStorage").Remotes.PurchaseItemIisting
GameStuff.Remotes["PurchaseItem"] = game:GetService("ReplicatedStorage").Remotes.Purchaseltem

local MainData = {
    Admins = {
        AdminInGame = false,
    },
    SafeMode = false
}

local api = {} do
    function api:RequestCatalog()
        return GameStuff.Remotes["RequestCatalog"]:InvokeServer()
    end
    function api:GetData(item, data)
        return item[data]
    end
    function api:GetTokens(player)
        return player.Tokens.Value
    end
    function api:PurchaseItemListing(itemName)
        local id
        for i,v in pairs(GameStuff.Remotes["RequestItemInfo"]:InvokeServer(itemName).listings[1]) do
            if i == "id" then
                id = v
            end
        end

        local args = {}
        args[1] = itemName
        args[2] = id

        GameStuff.Remotes["PurchaseItemListing"]:InvokeServer(table.unpack(args))
    end
    function api:PurchaseItem(itemName)
        GameStuff.Remotes["PurchaseItem"]:InvokeServer(itemName)
    end
end

-- [[ OnSignal Functions ]] --

local Signals = {} do
    function Signals.onAdminJoin(admin)
        MainData.Admins.AdminInGame = true
        print("a")
    end
end

-- [[ End of OnSignal Functions ]] --

-- [[ Admin Detection ]] --

for i,_ in pairs(GameStuff.Modules.Admins) do
    table.insert(MainData.Admins, i)
end

for _,v in pairs(game.Players:GetPlayers()) do
    if table.find(MainData.Admins, v.UserId) then
        Signals.onAdminJoin()
    end
end

game.Players.PlayerAdded:Connect(function(Player)
    if table.find(MainData.Admins, Player.UserId) then
        Signals.onAdminJoin(Player)
    end
end)

-- [[ End of Admin Detection ]] -- 

-- [[ Import UI Library ]] --

local Mercury = loadstring(game:HttpGet("https://raw.githubusercontent.com/deeeity/mercury-lib/master/src.lua"))()
local GUI = Mercury:Create{
    Name = "Demeter | Trade Simulator",
    Size = UDim2.fromOffset(600, 400),
    Theme = Mercury.Themes.Legacy,
    Link = "https://www.Monarch/MonarchOnTop"
}

GUI:Prompt{
	Followup = false,
	Title = "DISCLAIMER",
	Text = "By pressing 'Accept', you accept the risk that you MIGHT be banned",
	Buttons = {
		Accept = function()
			return true
		end

	}
}

local MainTab = GUI:Tab{
    Name = "Local Player",
    Icon = "rbxassetid://10055529778"
}
local NeverAFKVal = false
local __namecall
__namecall = hookmetamethod(game, "__namecall", function(...)
    local args = {...}
    local self = args[1]
    local method = getnamecallmethod()

    if NeverAFKVal and method == "FireServer" and self.Name == "AFK" then
        return
    end

    return __namecall(...)
end)



local NeverAFK = MainTab:Toggle{
    Name = "Anti AFK",
    StartingState = false,
    Description = nil,
    Callback = function(state)
        NeverAFKVal = state
    end
}
local AntiIdleVal = false
local AntiIdle = MainTab:Toggle{
    Name = "Anti Idle",
    StartingState = false,
    Description = nil,
    Callback = function(state)
        AntiIdleVal = state
    end
}

local VirtualUser = game:GetService("VirtualUser")
game.Players.LocalPlayer.Idled:Connect(function()
    if AntiIdleVal then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
end)

local SniperTab = GUI:Tab{
    Name = "Sniper",
    Icon = "rbxassetid://10055529778"
}

local SafeMode = SniperTab:Toggle{
    Name = "Safe Mode",
    StartingState = false,
    Description = "Adds a delay",
    Callback = function(state)
        MainData.SafeMode = state
    end
}

local SniperVals = {}
SniperVals["MaxNew"] = 0
SniperVals["Max"] = 0
SniperVals["Discount"] = 0
SniperVals["RefreshDelay"] = 2

local SniperMaxNew = SniperTab:Slider{
    Name = "Allowance per new item",
    Default = 0,
    Min = 0,
    Max = 500000,
    Description = "Sets the maximum amount of balance allowed to be spent on new items.",
    Callback = function(state)
        SniperVals["MaxNew"] = state
    end
}

local SniperMax = SniperTab:Slider{
    Name = "Allowance per item",
    Default = 0,
    Min = 0,
    Max = 500000,
    Description = "Sets the maximum amount of balance allowed to be spent on items.",
    Callback = function(state)
        SniperVals["Max"] = state
    end
}

local SniperDiscount = SniperTab:Slider{
    Name = "Discount %",
    Default = 0,
    Min = 0,
    Max = 100,
    Description = nil,
    Callback = function(state)
        SniperVals["Discount"] = state
    end
}



local RefreshDelay = SniperTab:Slider{
    Name = "Item refresh delay",
    Default = 1,
    Min = 1,
    Max = 100,
    Description = "Must enable safe mode for this feature.",
    Callback = function(state)
        SniperVals["RefreshDelay"] = state
    end
}

local SniperToggled = false
local SniperRunning = SniperTab:Toggle{
    Name = "Toggle Sniper",
    StartingState = false,
    Description = "Toggles sniper.",
    Callback = function(state)
        SniperToggled = state
    end
}

local DebugTab = GUI:Tab{
    Name = "Debug",
    Icon = "rbxassetid://10055529778"
}
function getPercent(p, x)
    return 100*(p/x)
end
local PrintItems = DebugTab:Button{
    Name = "Print ItemInfo",
    Description = "Gets ItemInfo",
    Callback = function()
        for i,v in pairs(api:RequestCatalog()) do
            print(api:GetData(v, "name"), api:GetData(v, "RAP"))
        end
    end
}



-- [[ End of Import UI Library ]] --

-- [[ Main Loop ]] --

while true do
    if MainData.SafeMode then
        task.wait(SniperVals.RefreshDelay)
    else
        task.wait(0.05)
    end
    if SniperToggled == true then
        local itemsTable = api:RequestCatalog()
        for i,v in pairs(itemsTable) do
            if api:GetData(v, "status") == "new" then
                if v.price <= SniperVals["MaxNew"] then
                    api:PurchaseItem(api:GetData(v, "name"))
                    print("Attempting to purchase " .. api:GetData(v, "name"))
                end
            else
                if v.price <= SniperVals["Max"] and math.round(getPercent(v.price, v.RAP)) <= SniperVals["Discount"] then
                    api:PurchaseItemListing(api:GetData(v, "name"))
                    print("Attempting to purchase " .. api:GetData(v, "name") .. " at a "..math.round(getPercent(v.price, v.RAP)).."% discount.")
                end
            end
        end
    end
end
